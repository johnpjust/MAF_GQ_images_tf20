import numpy as np
import numpy.random as rng
import tensorflow as tf
import mades

dtype = tf.float32

def flatten(l, ltypes=(list, tuple)):
    ltype = type(l)
    l = list(l)
    i = 0
    while i < len(l):
        while isinstance(l[i], ltypes):
            if not l[i]:
                l.pop(i)
                i -= 1
                break
            else:
                l[i:i + 1] = l[i]
        i += 1
    return ltype(l)

class BatchNormalization:
    """
    Small implementation of Batch Normalization.
    Mean and variance have to be updated manually.
    """
    def __init__(self, args):
        self.beta = None
        self.loggamma = None
        self.mean = None
        self.variance = None
        self.initialize(args)
        
    def __call__(self, input,  training=False):
        return self.apply(input, training=training)

    def initialize(self,args):
        n = int(args.n_dims)
        # self.loggamma = tf.Variable(np.zeros(n),dtype=input.dtype,name='bn_loggamma')
        self.loggamma = tf.Variable(initial_value=np.zeros(n), dtype=tf.float32, name='bn_loggamma') #eager
        # self.beta = tf.Variable(np.zeros(n),dtype=input.dtype,name='bn_beta')
        self.beta = tf.Variable(initial_value=np.zeros(n), dtype=tf.float32, name='bn_beta') #eager
        # self.mean = tf.Variable(np.zeros(n),trainable=False,dtype=input.dtype,name='bn_mean')
        self.mean = tf.Variable(initial_value=np.zeros(n), trainable=False, dtype=tf.float32, name='bn_mean') #eager
        # self.variance = tf.Variable(np.ones(n),trainable=False,dtype=input.dtype,name='bn_variance')
        self.variance = tf.Variable(initial_value=np.ones(n), trainable=False, dtype=tf.float32, name='bn_variance') #eager
        self.variables = [self.loggamma,self.beta,self.mean,self.variance]
    
    def apply(self, input, training=False):
        momenta = tf.nn.moments(input, [0])
        x_hat = tf.cond(training, 
                        lambda: (input-momenta[0])/tf.sqrt(momenta[1]+1e-7),
                        lambda: (input-self.mean)/tf.sqrt(self.variance+1e-7))
        output = tf.exp(self.loggamma)*x_hat+self.beta
        return output
    
    def eval_inv(self, y):
        """
        Evaluates the inverse batch norm transformation for output y.
        :param y: output as numpy array
        :return: input as numpy array
        """
        x_hat = (y - self.beta) / np.exp(self.loggamma)
        x = np.sqrt(self.variance) * x_hat + self.mean

        return x
    
class MaskedAutoregressiveFlow:
    """
    Implements a Masked Autoregressive Flow, which is a stack of mades such that the random numbers which drive made i
    are generated by made i-1. The first made is driven by standard gaussian noise. In the current implementation, all
    mades are of the same type. If there is only one made in the stack, then it's equivalent to a single made.
    """

    def __init__(self, n_inputs, n_hiddens, act_fun, n_mades, batch_norm=False,
                 input_order='sequential', mode='sequential', input=None, args=None):
        """
        Constructor.
        :param n_inputs: number of inputs
        :param n_hiddens: list with number of hidden units for each hidden layer
        :param act_fun: tensorflow activation function
        :param n_mades: number of mades
        :param batch_norm: whether to use batch normalization between mades
        :param input_order: order of inputs of last made
        :param mode: strategy for assigning degrees to hidden nodes: can be 'random' or 'sequential'
        :param input: tensorflow placeholder to serve as input; if None, a new placeholder is created
        """
        self.args = args
        # save input arguments
        self.n_inputs = n_inputs
        self.n_hiddens = n_hiddens
        self.act_fun = act_fun
        self.n_mades = n_mades
        self.batch_norm = batch_norm
        self.mode = mode

        self.input = input #eager
        self.training = False #eager
        self.parms = []

        self.mades = []
        self.bns = []
        self.u = self.input  ## moving to eager need to set self.u not self.input!!!!!
        self.logdet_dudx = 0.0

    ## init mades & BN
        for i in range(n_mades):

            # create a new made
            made = mades.GaussianMade(n_inputs, n_hiddens, act_fun, input_order, mode)
            self.mades.append(made)
            self.parms += made.parms

            input_order = 'random'

            # batch normalization
            if batch_norm:
                bn = BatchNormalization(self.args)
                self.parms += [bn.loggamma, bn.beta]
                self.bns.append(bn)

        self.input_order = self.mades[0].input_order
        self.parms = flatten(self.parms)

    def forward(self):
        self.u = self.input
        self.logdet_dudx = 0.0
        if getattr(self, 'batch_norm', False):
            for made, bn in zip(self.mades, self.bns):
                made.set_input(self.u)
                # inverse autoregressive transform
                self.u = made.u()
                self.logdet_dudx += 0.5 * tf.reduce_sum(made.logp(), axis=1, keepdims=True)

                moments = tf.nn.moments(self.u, [0])
                v_tmp = moments[1]
                self.u = bn(self.u, training=self.training)
                v_tmp = tf.cond(self.training, lambda: v_tmp, lambda: bn.variance)
                self.logdet_dudx += tf.reduce_sum(bn.loggamma) - 0.5 * tf.reduce_sum(tf.math.log(v_tmp + 1e-5))
        else:
            for made in self.mades:
                made.set_input(self.u)
                self.u = made.u()
                self.logdet_dudx += 0.5 * tf.reduce_sum(made.logp(), axis=1, keepdims=True)

    def L(self):
        self.forward()
        return tf.add(-0.5 * self.n_inputs * np.log(2 * np.pi) - 0.5 * tf.reduce_sum(self.u ** 2, axis=1, keepdims=True), self.logdet_dudx, name='L')

    def trn_loss(self):
        return -tf.reduce_mean(self.L())

    def eval(self, x, log=True, training=False):
        """
        Evaluate log probabilities for given inputs.
        :param x: data matrix where rows are inputs
        :param sess: tensorflow session where the graph is run
        :param log: whether to return probabilities in the log domain
        :param training: in training, data mean and variance is used for batchnorm
                         while outside training the saved mean and variance is used
        :return: list of log probabilities log p(x)
        """
        self.training = training
        self.input = x
        lprob = self.L()
        return lprob if log else np.exp(lprob)

    def update_batch_norm(self,x):
        """
        Updates batch normalization moments with the values obtained in data set x.
        :param x: data matrix whose moments will be used for the update
        :param sess: tensorflow session where the graph is run
        :return: None
        """
        self.input = x
        self.training = True
        self.u = self.input
        for made, bn in zip(self.mades, self.bns):
            made.set_input(self.u)
            self.u = made.u()
            moments = tf.nn.moments(self.u, [0])
            self.u = bn(self.u, training=self.training)
            bn.mean.assign(moments[0])
            bn.variance.assign(moments[1])

    def gen(self, n_samples=1, u=None):
        """
        Generate samples, by propagating random numbers through each made.
        :param sess: tensorflow session where the graph is run
        :param n_samples: number of samples
        :param u: random numbers to use in generating samples; if None, new random numbers are drawn
        :return: samples
        """

        x = rng.randn(n_samples, self.n_inputs) if u is None else u

        if getattr(self, 'batch_norm', False):

            for made, bn in zip(self.mades[::-1], self.bns[::-1]):
                x = bn.eval_inv(x)
                x = made.gen(n_samples, x)

        else:

            for made in self.mades[::-1]:
                x = made.gen(n_samples, x)

        return x
